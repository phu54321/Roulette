import bet.betRegions;
import utils.loc;
import utils.utils;
import utils.visualutils;

const betUnit = EUDArray(6);
const betCost = EUDArray(6);

function updatePlayerBetUnit(player) {
    SetCurrentPlayer(player);
    var betChanged = 0;
    if(Bring(player, AtLeast, 1, "ScanPos", "100,000")) {
        DisplayText("\x04베팅 단위를 \x0710만원\x04으로 설정하였습니다.");
        betUnit[player] = $U("10만원 베팅");
        betCost[player] = 10;
        betChanged = 1;
        RemoveUnitAt(All, "ScanPos", "100,000", player);
    }

    else if(Bring(player, AtLeast, 1, "ScanPos", "1,000,000")) {
        DisplayText("\x04베팅 단위를 \x07100만원\x04으로 설정하였습니다.");
        betUnit[player] = $U("100만원 베팅");
        betCost[player] = 100;
        betChanged = 1;
        RemoveUnitAt(All, "ScanPos", "1,000,000", player);
    }

    else if(Bring(player, AtLeast, 1, "ScanPos", "10,000,000")) {
        DisplayText("\x04베팅 단위를 \x071000만원\x04으로 설정하였습니다.");
        betUnit[player] = $U("1000만원 베팅");
        betCost[player] = 1000;
        betChanged = 1;
        RemoveUnitAt(All, "ScanPos", "10,000,000", player);
    }
    else if(Bring(player, AtLeast, 1, "ScanPos", "100,000,000")) {
        DisplayText("\x04베팅 단위를 \x071억\x04으로 설정하였습니다.");
        betUnit[player] = $U("1억 베팅");
        betCost[player] = 10000;
        betChanged = 1;
        RemoveUnitAt(All, "ScanPos", "100,000,000", player);
    }

    if(betChanged) {
        PlayWAV('staredit\\wav\\reload.ogg');
        betChanged = 0;
    }
}

function updateBetUnits() {
    for(var player = 0 ; player < 6 ; player++) {
        updatePlayerBetUnit(player);
    }
}


function startBetting() {
    utils.broadcastText("\04베팅을 시작하세요!");
    SetCountdownTimer(SetTo, 30);
}


function bettingLoop() {
    betRegions.loopBetRegions(function (rgn: betRegions.BetRegion) {
        const pos = rgn.pos;
        const x, y, w, h = pos.x, pos.y, pos.w, pos.h;
        loc.setLocationPos($L("cloc1"), x, y, w, h);

        KillUnit('Zerg Scourge', P8);

        for(var player = 0 ; player < 6 ; player++) {
            if(playerexist(player)) {
                const bCost, bUnit = betCost[player], betUnit[player];

                if(bCost != 0 && Bring(player, AtLeast, 1, "ScanPos", "cloc1")) {
                    if(Accumulate(player, AtLeast, bCost, Ore)) {
                        SetCurrentPlayer(player);
                        /**/ if(bCost == 10) DisplayText("\x07십만원\x04을 베팅하셨습니다.");
                        else if(bCost == 100) DisplayText("\x07백만원\x04을 베팅하셨습니다.");
                        else if(bCost == 1000) DisplayText("\x07천만원\x04을 베팅하셨습니다.");
                        else if(bCost == 10000) DisplayText("\x071억\x04을 베팅하셨습니다.");
                        RemoveUnitAt(1, "ScanPos", "cloc1", player);
                        utils.createPassableUnit(bUnit, "cloc1", player);
                        SetResources(player, Subtract, bCost, Ore);
                    }
                    else {
                        SetCurrentPlayer(player);
                        DisplayText("\x04베팅자금이 부족합니다.");
                        PlayWAV("staredit\\wav\\onEmpty.ogg");
                    }
                }
            }
        }

        MoveUnit(All, "(any unit)", AllPlayers, "cloc1", "cloc1");
        Order("(any unit)", AllPlayers, "cloc1", Move, "cloc1");
    });

    for(var player = 0 ; player < 6 ; player++) {
        if(playerexist(player) && Bring(player, AtLeast, 1, "ScanPos", "betZone")) {
            SetCurrentPlayer(player);
            DisplayText("\x03[에러] \x06베팅지역이 아닙니다.");
            PlayWAV("sound\\Misc\\PError.WAV");
        }
    }

    if (CountdownTimer(Exactly, 0)) return 0;
    else return 1;
}


function payBackBets(rouletteNum) {
    const betUnits = [$U("10만원 베팅"), $U("100만원 베팅"), $U("1000만원 베팅"), $U("1억 베팅")];
    const betCosts = [10, 100, 1000, 10000];

    betRegions.loopBetRegions(function (rgn: betRegions.BetRegion) {
        const pos = rgn.pos;
        const x, y, w, h = pos.x, pos.y, pos.w, pos.h;
        loc.setLocationPos($L("cloc1"), x, y, w, h);

        const payBackRate = rgn.betChecker(rouletteNum);
        for(var betType = 0 ; betType < 4 ; betType++) {
            const betUnit, betCost = betUnits[betType], betCosts[betType];
            for(var player = 0 ; player < 6;  player++) {
                if(
                    playerexist(player) &&
                    Command(player, AtLeast, 1, betUnit) &&
                    Bring(player, AtLeast, 1, betUnit, 'cloc1')
                ) {
                    KillUnitAt(1, betUnit, 'cloc1', player);
                    SetResources(player, Add, betCost * payBackRate, Ore);
                }
            }
        }
    });
}
